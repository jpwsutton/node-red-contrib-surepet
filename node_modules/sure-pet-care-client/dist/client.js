"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SurePetCareClient = void 0;
const node_fetch_1 = __importDefault(require("node-fetch"));
class SurePetCareClient {
    constructor() {
        this.token = '';
        this.baseUrl = 'https://app.api.surehub.io';
        this.authenticate = async (email, password) => {
            const resp = await node_fetch_1.default(`${this.baseUrl}/api/auth/login`, {
                method: 'POST',
                body: JSON.stringify({ email_address: email, password, device_id: '.' }),
                headers: { 'Content-Type': 'application/json' },
            });
            if (!resp.ok) {
                switch (resp.status) {
                    case 401:
                        throw new Error('Authentication failed: invalid credentials');
                    default:
                        throw new Error(`Authentication failed: received ${resp.status} ${resp.statusText}`);
                }
            }
            const token = resp.headers.get('Authorization');
            if (token === null) {
                throw new Error('Authentication failed: no authorization token in response');
            }
            this.token = token;
        };
        this.getState = async () => {
            const resp = await node_fetch_1.default(`${this.baseUrl}/api/me/start`, {
                headers: { 'Content-Type': 'application/json', 'Authorization': this.token },
            });
            if (!resp.ok) {
                switch (resp.status) {
                    case 401:
                        throw new Error('Get state failed: unauthenticated');
                    default:
                        throw new Error(`Get state failed: received ${resp.status} ${resp.statusText}`);
                }
            }
            const { data } = await resp.json();
            return data;
        };
        this.getPets = async () => {
            const state = await this.getState();
            return state.pets;
        };
        this.getPetByName = async (name) => {
            const pets = await this.getPets();
            const pet = pets.find((p) => p.name.toLowerCase() === name.toLowerCase());
            if (!pet) {
                throw new Error('Pet not found');
            }
            return pet;
        };
        this.getPetById = async (id) => {
            const pets = await this.getPets();
            const pet = pets.find((p) => p.id === id);
            if (!pet) {
                throw new Error('Pet not found');
            }
            return pet;
        };
        this.setPetLocation = async (id, location, since = new Date()) => {
            const date = since.toISOString();
            const resp = await node_fetch_1.default(`${this.baseUrl}/api/pet/${id}/position`, {
                method: 'POST',
                body: JSON.stringify({ since: date, where: location }),
                headers: { 'Content-Type': 'application/json', 'Authorization': this.token },
            });
            if (!resp.ok) {
                switch (resp.status) {
                    case 401:
                        throw new Error('Set pet location failed failed: invalid credentials');
                    default:
                        throw new Error(`Set pet location failed failed: received ${resp.status} ${resp.statusText}`);
                }
            }
        };
    }
}
exports.SurePetCareClient = SurePetCareClient;
